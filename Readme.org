* Dynamic Config for I3

  The idea behind this script is to automatize the generation of i3 config
  files based on a template and a configuration file, covering some common
  use cases for the config.

  This is a personal project I used so I could keep a base i3 configuration
  template to be used on different computers or with different profiles
  (e.g. work vs home).

** Configuration Options

   The configuration yaml understands the following keys.

*** Vars

    Vars are the simplest dynamic config. They have a name and a
    value, and they are substituted by their value.

*Example (config)*
#+begin_src yaml
vars:
  - name: font-name
    value: "pango:DejaVu Sans Mono"
  - name: font-size
    value: "8"
  - name: dmenu-args
    value: "-l 20 -fn Hack-24"
#+end_src

*Example (template)*
#+begin_src conf
# ...
font {{VAR_font-name}} {{VAR_font-size}}
# ...
bindsym $mod+d exec dmenu_run {{VAR_dmenu-args}}
#+end_src

*Example (rendered)*
#+begin_src conf
# ...
font pango:DejaVu Sans Mono 8
# ...
bindsym $mod+d exec dmenu_run -l 20 -fn Hack-24
#+end_src

*** Modes
    
    An array of specifications for modes.

*Example (config)*
#+begin_src yaml
modes:

  - name: simple_mode
    shortcut: $mod+s
    description: A simple mode
    command_template: "exec echo {}"
    commands:
      - shortcut: e
        template_args: ["Hello World!"]

  - name: go
    command_template: "[con_mark=\"{}\"] focus"
    commands:
      - shortcut: f
        template_args: [main_firefox]
      - shortcut: e
        template_args: [main_emaxs]

  - name: i3
    command_template: "exec {}"
    commands:
      - shortcut: m
        template_args: [i3h-mark-window.sh]
      - shortcut: b
        template_args: [i3h-toggle-border]

  - name: resize
    shortcut: $mod+r
    command_template: "resize {} {} 10 px or 10 ppt"
    escape_after_each_command: false
    commands:
      - shortcut: Left
        template_args: [shrink, width]
      - shortcut: Down
        template_args: [grow, height]
      - shortcut: Up
        template_args: [shrink, height]
      - shortcut: Right
        template_args: [grow, width]
      - shortcut: b
        template: "{}"
        template_args: [resize set 640 480]
#+end_src

*Example (template)*
#+begin_src conf
#...
{{MODE_simple_mode}}
# ...
set $mode_go "Go!"
{{MODE_go}}
bindsym $mod_go mode "$mode_go"
# ...
set $mode_i3 "i3 Shortcuts"
{{MODE_i3}}
bindsym $mod_i3 mode "$mode_i3"
# ...
{{MODE_resize}}
#+end_src

*Example (rendered)*
#+begin_src conf
#...
set $mode_simple_mode A simple mode
mode "$mode_simple_mode" {
    bindsym e exec echo Hello World!; mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+s mode "$mode_simple_mode"

# ...
set $mode_go "Go!"
mode "$mode_go" {
    bindsym f [con_mark="main_firefox"] focus; mode "default"
    bindsym e [con_mark="main_emaxs"] focus; mode "default"
    bindsym Escape mode "default"
}

bindsym $mod_go mode "$mode_go"
# ...
set $mode_i3 "i3 Shortcuts"
mode "$mode_i3" {
    bindsym m exec i3h-mark-window.sh; mode "default"
    bindsym b exec i3h-toggle-border; mode "default"
    bindsym Escape mode "default"
}

bindsym $mod_i3 mode "$mode_i3"
# ...
mode "$mode_resize" {
    bindsym Left resize shrink width 10 px or 10 ppt
    bindsym Down resize grow height 10 px or 10 ppt
    bindsym Up resize shrink height 10 px or 10 ppt
    bindsym Right resize grow width 10 px or 10 ppt
    bindsym b resize set 640 480
    bindsym Escape mode "default"
}
bindsym $mod+r mode "$mode_resize"
#+end_src

   Each item in the array represents a mode with these attributes:

   - *name*

     The name of the mode.

   - *command_template* (optional)

     This is the template for all commands in this mode. This template
     will be expanded with the ~template_args~ associated with each command.

     An example will make it crystal clear: if you want a mode that
     executes different programs, you can do this:

#+begin_src yaml
- name: exec_programs
  description: A mode to execute programs
  command_template: "exec {}"
  commands:
    - shortcut: f
      template_args: [firefox]
    - shortcut: c
      template_args: [chrome]
#+end_src
     
     Notice that ~command_template~ has a single placeholder (~{}~), so we give
     it a single template argument (~firefox~ and ~chrome~). If we had a template
     with two placeholder, we would give it two ~template_args~, and so on.

     ~command_template~ is optional because you can also specify a ~template~ for
     each command individually.

   - *commands*

     A list of commands. Each command *must* specify at least a
     ~shortcut~, which will be the shortcut to execute the command in
     this mode, and a ~template_args~. It *may* specify a ~template~.

     The value for ~template~, if not given, defaults to the ~command_template~
     specified on the mode. This means that these two configs are equivalent:

#+begin_src yaml
- name: echo
  command_template: "echo {}"
  commands:
    - shortcut: a
      template_args: [hello]
    - shortcut: b
      template_args: [bye]
# IS THE SAME AS
- name: echo
  commands:
    - shortcut: a
      template_args: [hello]
      template: "echo {}"
    - shortcut: b
      template_args: [bye]
      template: "echo {}"
#+end_src

     But notice that ~template~ always has priority over ~command_template~,
     so you can have a single command not following the template for the mode.
     Therefore the following two configs are equivalent:

#+begin_src yaml
- name: echo
  command_template: "echo {}"
  commands:
    - shortcut: a
      template_args: [hello]
    - shortcut: b
      template: "echo {} >/dev/stderr"
      template_args: [bye]
# IS THE SAME AS
- name: echo
  commands:
    - shortcut: a
      template_args: [hello]
      template: "echo {}"
    - shortcut: b
      template_args: [bye]
      template: "echo {} >/dev/stderr"
#+end_src

     ~template_args~ is an array of args that will be used to format
     the command's ~template~. This uses the python string formatting:
     ~template.format(*template_args)~

   - escape_after_each_command (optional)

     A boolean indicating whether we should escape to the default mode after each
     command. *Defaults to True*. This basically appends ~; mode "default"~ after
     each command.     

   - shortcut (optional)

     A shortcut. If given, a line like is appended at the end to set the shortcut,
     like ~bindsym ${SHORTCUT} mode "$mode_{NAME}"~.

   - description (optional)
     
     A description. If given, a line is added setting a variable with
     this description before the mode is defined. **If not given, you**
     **have to add the set part yourself**.

     The variable is always called ~$mode_{NAME}~.
