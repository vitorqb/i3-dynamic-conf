* Dynamic Config for I3

  The idea behind this script is to automatize the generation of i3 config
  files based on a template and a configuration file, covering some common
  use cases for the config.

  This is a personal project I used so I could keep a base i3 configuration
  template to be used on different computers or with different profiles
  (e.g. work vs home).

** Configuration Options

   The configuration yaml understands the following keys.

*** Vars

    Vars are the simplest dynamic config. They have a name and a
    value, and they are substituted by their value.

*Example (config)*
#+begin_src yaml
vars:
  - name: font-name
    value: "pango:DejaVu Sans Mono"
  - name: font-size
    value: "8"
  - name: dmenu-args
    value: "-l 20 -fn Hack-24"
#+end_src

*Example (template)*
#+begin_src conf
# ...
font {{VAR_font-name}} {{VAR_font-size}}
# ...
bindsym $mod+d exec dmenu_run {{VAR_dmenu-args}}
#+end_src

*Example (rendered)*
#+begin_src conf
# ...
font pango:DejaVu Sans Mono 8
# ...
bindsym $mod+d exec dmenu_run -l 20 -fn Hack-24
#+end_src

*** Modes
    
    An array of specifications for modes.

*Example (config)*
#+begin_src yaml
modes:

  - name: simple_mode
    shortcut: $mod+s
    description: A simple mode
    command_prefix: "exec echo "
    commands:
      - shortcut: e
        command: "Hello World!"

  - name: go
    command_template: "[con_mark=\"{}\"] focus"
    commands:
      - shortcut: f
        template_args: [main_firefox]
      - shortcut: e
        template_args: [main_emaxs]

  - name: i3
    command_prefix: "exec "
    commands:
      - shortcut: m
        command: i3h-mark-window.sh
      - shortcut: b
        command: i3h-toggle-border

  - name: resize
    shortcut: $mod+r
    command_template: "resize {} {} 10 px or 10 ppt"
    escape_after_each_command: false
    commands:
      - shortcut: Left
        template_args: [shrink, width]
      - shortcut: Down
        template_args: [grow, height]
      - shortcut: Up
        template_args: [shrink, height]
      - shortcut: Right
        template_args: [grow, width]
#+end_src

*Example (template)*
#+begin_src conf
#...
{{MODE_simple_mode}}
# ...
set $mode_go "Go!"
{{MODE_go}}
bindsym $mod_go mode "$mode_go"
# ...
set $mode_i3 "i3 Shortcuts"
{{MODE_i3}}
bindsym $mod_i3 mode "$mode_i3"
# ...
{{MODE_resize}}
#+end_src

*Example (rendered)*
#+begin_src conf
#...
set $mode_simple_mode A simple mode
mode "$mode_simple_mode" {
    bindsym e exec echo Hello World!; mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+s mode "$mode_simple_mode"

# ...
set $mode_go "Go!"
mode "$mode_go" {
    bindsym f [con_mark="main_firefox"] focus; mode "default"
    bindsym e [con_mark="main_emaxs"] focus; mode "default"
    bindsym Escape mode "default"
}

bindsym $mod_go mode "$mode_go"
# ...
set $mode_i3 "i3 Shortcuts"
mode "$mode_i3" {
    bindsym m exec i3h-mark-window.sh; mode "default"
    bindsym b exec i3h-toggle-border; mode "default"
    bindsym Escape mode "default"
}

bindsym $mod_i3 mode "$mode_i3"
# ...
mode "$mode_resize" {
    bindsym Left resize shrink width 10 px or 10 ppt
    bindsym Down resize grow height 10 px or 10 ppt
    bindsym Up resize shrink height 10 px or 10 ppt
    bindsym Right resize grow width 10 px or 10 ppt
    bindsym Escape mode "default"
}
bindsym $mod+r mode "$mode_resize"
#+end_src

   Each item in the array represents a mode with these attributes:

   - name

     The name of the mode.

   - command_template (or command_prefix)

     A template, which will be used to render each command.
     It will be used calling the python ~.format(**args)~ method.

     Specifying ~command_prefix~ is the same as a template of the form
     ~"command_prefix {}"~

   - commands

     A list of commands. Each command *must* specify a ~shortcut~, which
     will be the shortcut to execute the command in this mode. Furthermore,
     a command *must* specify either ~command~ or ~template_args~.

     ~template_args~ is an array of args that will be used to format the ~template~
     for the mode. Specifying ~command~ is the same as a ~template_args~ of a single
     argument (~tamplte_args: [command]~). This is handy if you defined ~command_prefix~
     in the mode config.

   - escape_after_each_command (optional)

     A boolean indicating whether we should escape to the default mode after each
     command. *Defaults to True*. This basically appends ~; mode "default"~ after
     each command.     

   - shortcut (optional)

     A shortcut. If given, a line like is appended at the end to set the shortcut,
     like ~bindsym ${SHORTCUT} mode "$mode_{NAME}"~.

   - description (optional)
     
     A description. If given, a line is added setting a variable with
     this description before the mode is defined. **If not given, you**
     **have to add the set part yourself**.

     The variable is always called ~$mode_{NAME}~.
